// FUNCTIONS

// Get next breakpoint by name of current
@function breakpoint-next($name, $type: 'value', $breakpoints: $grid-breakpoints, $breakpoints-names: map-keys($breakpoints), $breakpoints-values: map-values($breakpoints) ) {
  $result: 0;
  $i: index($breakpoints-names, $name);
  @if ($type == 'name') {
    @if($i < length($breakpoints)) { $result: nth($breakpoints-names, $i + 1) }
  } @else if ($type == 'value') {
    @if($i < length($breakpoints)) { $result: nth($breakpoints-values, $i + 1) }
  }
  @if ($result == 0 or $result == '') {
    @return "No breakpoint found for `#{$name}` in $breacpoints map. Property omitted.";
  } @else {
    @return $result;
  }
}

// Get prev breakpoint by name of current
@function breakpoint-prev($name, $type: 'value', $breakpoints: $grid-breakpoints, $breakpoints-names: map-keys($breakpoints), $breakpoints-values: map-values($breakpoints) ) {
  $result: 0;
  $i: index($breakpoints-names, $name);
  @if ($type == 'name') {
    @if($i <= length($breakpoints) and $i > 1) { $result: nth($breakpoints-names, $i - 1) }
  } @else if ($type == 'value') {
    @if($i <= length($breakpoints) and $i > 1) { $result: nth($breakpoints-values, $i - 1) }
  }
  @if ($result == 0 or $result == '') {
    @return "No breakpoint found for `#{$name}` in $breacpoints map. Property omitted.";
  } @else {
    @return $result;
  }
}

// Get last breakpoint from map
@function breakpoint-last($type: 'value', $breakpoints: $grid-breakpoints, $breakpoints-names: map-keys($breakpoints), $breakpoint-values: map-values($breakpoints) ) {
  @if ($type == 'name') {
    @return nth($breakpoints-names, 1);
  } @else if ($type == 'value') {
    @return nth($breakpoint-values, 1);
  }
}

// Get first breakpoint from map
@function breakpoint-first($type: 'value', $breakpoints: $grid-breakpoints, $breakpoints-names: map-keys($breakpoints), $breakpoint-values: map-values($breakpoints) ) {
  @if ($type == 'name') {
    @return nth($breakpoints-names, length($breakpoints));
  } @else if ($type == 'value') {
    @return nth($breakpoint-values, length($breakpoints));
  }
}

// Get z-point from map
@function z($layer) {

  @if not map-has-key($z-layers, $layer) {
    @warn "No layer found for `#{$layer}` in $z-layers map. Property omitted.";
  }

  @return map-get($z-layers, $layer);
}

// UTILITIES

// MEDIA QUERIES
// @media screen and min-width
@mixin media-min($breakpoint, $breakpoints: $grid-breakpoints) {

  $breakpoint-value: null;

  @if (map-get($breakpoints, $breakpoint)) {
    $breakpoint-value: map-get($breakpoints, $breakpoint) + 1;
  } @else {
    $breakpoint-value: $breakpoint;
  }

  @media screen and (min-width: $breakpoint-value) {
    @content;
  }
}

// @media screen and max-width
@mixin media-max($breakpoint, $breakpoints: $grid-breakpoints) {

  $breakpoint-value: null;

  @if (map-get($breakpoints, $breakpoint)) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
  } @else {
    $breakpoint-value: $breakpoint;
  }

  @media screen and (max-width: $breakpoint-value) {
    @content;
  }
}

// @media screen and min-width and max-width
@mixin media-between($breakpoint-min, $breakpoint-max, $breakpoints: $grid-breakpoints) {

  $breakpoint-value-min: null;
  $breakpoint-value-max: null;

  @if (map-get($breakpoints, $breakpoint-min)) {
    $breakpoint-value-min: map-get($breakpoints, $breakpoint-min) + 1;
  } @else {
    $breakpoint-value-min: $breakpoint-min + 1;
  }

  @if (map-get($breakpoints, $breakpoint-max)) {
    $breakpoint-value-max: map-get($breakpoints, $breakpoint-max);
  } @else {
    $breakpoint-value-max: $breakpoint-max;
  }

  @media screen and (min-width: $breakpoint-value-min) and (max-width: $breakpoint-value-max) {
    @content;
  }
}

// HTML ELEMENTS
// Forms
@mixin form() {

  fieldset {
    padding: 0;
    margin: 0;
    border: 0;
    min-width: 0;
  }

  legend {
    display: block;
    width: 100%;
    padding: 0;
    font-size: ($font-size-primary * 1.5);
    line-height: inherit;
    color: $color-text-primary;
    border: 0;
    border-bottom: 1px solid $gray-lighter;
  }

  label {
    display: inline-block;
    max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  }

  // Search inputs in iOS
  //
  // This overrides the extra rounded corners on search inputs in iOS so that our
  // `.form-control` class can properly style them. Note that this cannot simply
  // be added to `.form-control` as it's not specific enough. For details, see
  // https://github.com/twbs/bootstrap/issues/11586.

  input[type="search"] {
    -webkit-appearance: none;
  }
}

// Input
@mixin input() {
  display: inline-block;
  border-radius: 0;
  border: none;
  box-shadow: none;
  background-image: none;
  vertical-align: top;

  @include placeholder;

  &::-ms-expand {
    border: 0;
    background-color: transparent;
  }

  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    opacity: 1;
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }

  max-width: 100%;
}

// Select
@mixin select {
  @include input();
}

// Button
@mixin button() {
  border-radius: 0;
  border: none;
  background-color: transparent;
  box-shadow: none;
  cursor: pointer;
  display: inline-block;
  max-width: 100%;
  text-align: center;
  touch-action: manipulation;
  text-decoration: none;
  vertical-align: top;
  white-space: nowrap;

  &:active {
    outline: 0;
  }

  &:hover {
    text-decoration: none;
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}

// Textareas
@mixin textarea() {
  @include input();
}

// Tables
@mixin table() {
  border-collapse: collapse;

  th {
    text-align: left;
  }

  table col[class*="cell-"] {
    position: static; // Prevent border hiding in Firefox and IE9-11 (see https://github.com/twbs/bootstrap/issues/11623)
    float: none;
    display: table-column;
  }

  table {
    td,
    th {
      &[class*="cell-"] {
        position: static; // Prevent border hiding in Firefox and IE9-11 (see https://github.com/twbs/bootstrap/issues/11623)
        float: none;
        display: table-cell;
      }
    }
  }
}

// List
@mixin list($className: 'list') {
  @include list-unstyled();

  > .#{$className}-item {
    display: inline-block;
    position: relative;
  }
}

// List table
@mixin list-table($className: 'list') {
  @include list-unstyled();
  display: table;
  width: 100%;

  > .#{$className}-item {
    display: table-cell;
  }
}

// List justified
@mixin list-justified($className: 'list') {
  @include list-unstyled();
  font-size: 0;
  line-height: 0;
  text-align: justify;
  width: 100%;

  &:after {
    content: "";
    display: inline-block;
    height: 0;
    overflow: hidden;
    visibility: hidden;
    width: 100%;
  }
}

// List horizontal
@mixin list-vertical($className: 'list') {
  @include list-unstyled();

  > .#{$className}-item {
    display: inline-block;
    width: 100%;
  }
}

// Unstyled ul/ol list
@mixin list-unstyled() {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Link decoration - color, color on hover and text-decoration on hover
@mixin link-decor(
  $color: $link-color,
  $hover-color: $link-hover-color,
  $decoration: $link-decoration,
  $hover-decoration: $link-hover-decoration
) {
  color: $color;
  text-decoration: $decoration;

  &:hover {
    color: $hover-color;
    text-decoration: $hover-decoration;
  }
}

// Base notice
@mixin notice() {
  padding: 9px;
  margin-bottom: $grid-gutter * 2;
  border: 1px solid transparent;
  display: inline-block;

  h2, h3, h4 {
    margin-top: 0;
    color: inherit;
  }

  > p,
  > ul {
    margin-bottom: 0;
  }

  > p + p {
    margin-top: 5px;
  }
}

// Notice customize
@mixin notice-variant($color) {
  background-color: lighten($color, 10%);
  border-color: $color;
  color: darken($color, 40%);

  hr {
    border-top-color: darken($color, 5%);
  }

  a {
    color: darken($color, 50%);
  }
}

// Clearfix
@mixin clearfix{

  &:after {
    content: "";
    display: table;
    clear: both;
    height: 0;
    font-size: 0;
    line-height: 0;
    margin: 0;
    padding: 0;
    width: 100%;
  }
}

// CSS MIXINS
// Element size - width and height
@mixin size($width: 0, $height: 0) {
  @if ($width != 0 and $height == 0) {
    $height: $width;
  }
  height: $height;
  width: $width;
}

// Vertical margin
@mixin margin-y($top: 0px, $bottom: 0px) {
  @if ($top != 0 and $bottom == 0) {
    $bottom: $top;
  }
  margin-bottom: $bottom;
  margin-top: $top;
}

// Horizontal margin
@mixin margin-x($left: 0px, $right: 0px) {
  @if ($left != 0 and $right == 0) {
    $right: $left;
  }
  margin-left: $left;
  margin-right: $right;
}

// Vertical margin
@mixin margin-y($top: 0px, $bottom: 0px) {
  @if ($top != 0 and $bottom == 0) {
    $bottom: $top;
  }
  margin-bottom: $bottom;
  margin-top: $top;
}

// Horizontal margin
@mixin margin-x($left: 0px, $right: 0px) {
  @if ($left != 0 and $right == 0) {
    $right: $left;
  }
  margin-left: $left;
  margin-right: $right;
}

// Vertical padding
@mixin padding-y($top: 0px, $bottom: 0px) {
  @if ($top != 0 and $bottom == 0) {
    $bottom: $top;
  }
  padding-bottom: $bottom;
  padding-top: $top;
}

// Horizontal padding
@mixin padding-x($left: 0px, $right: 0px) {
  @if ($left != 0 and $right == 0) {
    $right: $left;
  }
  padding-left: $left;
  padding-right: $right;
}

// Placeholder text
@mixin placeholder($color: #ccc ) {
  // Firefox
  &::-moz-placeholder {
    color: $color;
    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  // Internet Explorer 10+
  &::-webkit-input-placeholder {
    color: $color;
  }
  // Safari and Chrome

  &:focus {

    &::-moz-placeholder {
      color: $color;
      opacity: 0; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
    }
    &:-ms-input-placeholder {
      color: $color;
      opacity: 0;
    }
    // Internet Explorer 10+
    &::-webkit-input-placeholder {
      color: $color;
      opacity: 0;
    }
    // Safari and Chrome
  }
}

// Vertical align for inline elements
@mixin vertical-align-middle() {

  & > * {
    vertical-align: middle;
  }

  &:after {
    content: '';
    display: inline-block;
    height: 100%;
    overflow: hidden;
    vertical-align: middle;
    width: 0;
  }
}

// Position center
@mixin position-center ( $coordinates: 50% 50%, $position: absolute ) {

  $top: nth( $coordinates, 1);
  $left: nth( $coordinates, 2);

  transform: translate( -$top, -$left );
  top: $top;
  left: $left;
  position: $position;
}

// Overlay position
@mixin position-overlay ( $position: absolute ){
  position: $position;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

// Transition
@mixin transition($properties, $delay: $transition-delay, $animation: $transition-animation) {

  $result: null;

  @each $property in $properties {
    $result: join($result, #{$delay $animation $property}, comma);
  }

  transition: $result;
}

// Text color
@function get-text-color($background-color) {

  @if (lightness($background-color) > 50) {

    @return #000;

  } @else {

    @return #fff;
  }
}